{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import type { ComputedFields } from \"contentlayer/source-files\";\nimport {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\";\n\nconst computedFields: ComputedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n};\n\nconst Work = defineNestedType(() => ({\n  name: \"Works\",\n  fields: {\n    label: { type: \"string\", required: true },\n    title: { type: \"string\", required: true },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    url: {\n      type: \"string\",\n      required: false,\n    },\n  },\n}));\n\nexport const Index = defineDocumentType(() => ({\n  name: \"Index\",\n  filePathPattern: `index.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    works: {\n      type: \"list\",\n      of: Work,\n    },\n  },\n  computedFields,\n}));\n\nconst Role = defineNestedType(() => ({\n  name: \"Roles\",\n  fields: {\n    character: { type: \"string\", required: true },\n    show: { type: \"string\", required: true },\n    company: {\n      type: \"string\",\n      required: true,\n    },\n    director: {\n      type: \"string\",\n      required: true,\n    },\n    award: {\n      type: \"string\",\n      required: false,\n    },\n  },\n}));\n\nexport const Resume = defineDocumentType(() => ({\n  name: \"Resume\",\n  filePathPattern: `resume.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n    shows: {\n      type: \"list\",\n      of: Role,\n    },\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"./src/content\",\n  documentTypes: [Index, Resume],\n});\n"],
  "mappings": ";AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,IAAM,iBAAiC;AAAA,EACrC,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK;AAAA,EACjC;AACF;AAEA,IAAM,OAAO,iBAAiB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AACF,EAAE;AAEK,IAAM,QAAQ,mBAAmB,OAAO;AAAA,EAC7C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,IACR;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,IAAI;AAAA,IACN;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAM,OAAO,iBAAiB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,WAAW,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC5C,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AACF,EAAE;AAEK,IAAM,SAAS,mBAAmB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,IACR;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,IAAI;AAAA,IACN;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,OAAO,MAAM;AAC/B,CAAC;",
  "names": []
}
